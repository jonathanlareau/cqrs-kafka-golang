// Code generated by protoc-gen-go. DO NOT EDIT.
// source: services.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Id struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Id) Reset()         { *m = Id{} }
func (m *Id) String() string { return proto.CompactTextString(m) }
func (*Id) ProtoMessage()    {}
func (*Id) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e16ccb8c5307b32, []int{0}
}

func (m *Id) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Id.Unmarshal(m, b)
}
func (m *Id) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Id.Marshal(b, m, deterministic)
}
func (m *Id) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Id.Merge(m, src)
}
func (m *Id) XXX_Size() int {
	return xxx_messageInfo_Id.Size(m)
}
func (m *Id) XXX_DiscardUnknown() {
	xxx_messageInfo_Id.DiscardUnknown(m)
}

var xxx_messageInfo_Id proto.InternalMessageInfo

func (m *Id) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type Result struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e16ccb8c5307b32, []int{1}
}

func (m *Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Result.Unmarshal(m, b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Result.Marshal(b, m, deterministic)
}
func (m *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(m, src)
}
func (m *Result) XXX_Size() int {
	return xxx_messageInfo_Result.Size(m)
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Result) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type User struct {
	UserId               int64    `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	FirstName            string   `protobuf:"bytes,2,opt,name=firstName,proto3" json:"firstName,omitempty"`
	LastName             string   `protobuf:"bytes,3,opt,name=lastName,proto3" json:"lastName,omitempty"`
	Age                  int32    `protobuf:"varint,4,opt,name=age,proto3" json:"age,omitempty"`
	UpdateDate           int64    `protobuf:"varint,5,opt,name=updateDate,proto3" json:"updateDate,omitempty"`
	CreateDate           int64    `protobuf:"varint,6,opt,name=createDate,proto3" json:"createDate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e16ccb8c5307b32, []int{2}
}

func (m *User) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_User.Unmarshal(m, b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_User.Marshal(b, m, deterministic)
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return xxx_messageInfo_User.Size(m)
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *User) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *User) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *User) GetAge() int32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *User) GetUpdateDate() int64 {
	if m != nil {
		return m.UpdateDate
	}
	return 0
}

func (m *User) GetCreateDate() int64 {
	if m != nil {
		return m.CreateDate
	}
	return 0
}

type Product struct {
	ProductId            int64    `protobuf:"varint,1,opt,name=productId,proto3" json:"productId,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description          string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	UpdateDate           int64    `protobuf:"varint,4,opt,name=updateDate,proto3" json:"updateDate,omitempty"`
	CreateDate           int64    `protobuf:"varint,5,opt,name=createDate,proto3" json:"createDate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Product) Reset()         { *m = Product{} }
func (m *Product) String() string { return proto.CompactTextString(m) }
func (*Product) ProtoMessage()    {}
func (*Product) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e16ccb8c5307b32, []int{3}
}

func (m *Product) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Product.Unmarshal(m, b)
}
func (m *Product) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Product.Marshal(b, m, deterministic)
}
func (m *Product) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Product.Merge(m, src)
}
func (m *Product) XXX_Size() int {
	return xxx_messageInfo_Product.Size(m)
}
func (m *Product) XXX_DiscardUnknown() {
	xxx_messageInfo_Product.DiscardUnknown(m)
}

var xxx_messageInfo_Product proto.InternalMessageInfo

func (m *Product) GetProductId() int64 {
	if m != nil {
		return m.ProductId
	}
	return 0
}

func (m *Product) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Product) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Product) GetUpdateDate() int64 {
	if m != nil {
		return m.UpdateDate
	}
	return 0
}

func (m *Product) GetCreateDate() int64 {
	if m != nil {
		return m.CreateDate
	}
	return 0
}

type Order struct {
	OrderId              int64    `protobuf:"varint,1,opt,name=orderId,proto3" json:"orderId,omitempty"`
	UserId               int64    `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	ProductId            int64    `protobuf:"varint,3,opt,name=productId,proto3" json:"productId,omitempty"`
	Quantity             int32    `protobuf:"varint,4,opt,name=quantity,proto3" json:"quantity,omitempty"`
	OrderDate            int64    `protobuf:"varint,5,opt,name=orderDate,proto3" json:"orderDate,omitempty"`
	ShipDate             int64    `protobuf:"varint,6,opt,name=shipDate,proto3" json:"shipDate,omitempty"`
	UpdateDate           int64    `protobuf:"varint,7,opt,name=updateDate,proto3" json:"updateDate,omitempty"`
	CreateDate           int64    `protobuf:"varint,8,opt,name=createDate,proto3" json:"createDate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Order) Reset()         { *m = Order{} }
func (m *Order) String() string { return proto.CompactTextString(m) }
func (*Order) ProtoMessage()    {}
func (*Order) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e16ccb8c5307b32, []int{4}
}

func (m *Order) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Order.Unmarshal(m, b)
}
func (m *Order) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Order.Marshal(b, m, deterministic)
}
func (m *Order) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Order.Merge(m, src)
}
func (m *Order) XXX_Size() int {
	return xxx_messageInfo_Order.Size(m)
}
func (m *Order) XXX_DiscardUnknown() {
	xxx_messageInfo_Order.DiscardUnknown(m)
}

var xxx_messageInfo_Order proto.InternalMessageInfo

func (m *Order) GetOrderId() int64 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *Order) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *Order) GetProductId() int64 {
	if m != nil {
		return m.ProductId
	}
	return 0
}

func (m *Order) GetQuantity() int32 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *Order) GetOrderDate() int64 {
	if m != nil {
		return m.OrderDate
	}
	return 0
}

func (m *Order) GetShipDate() int64 {
	if m != nil {
		return m.ShipDate
	}
	return 0
}

func (m *Order) GetUpdateDate() int64 {
	if m != nil {
		return m.UpdateDate
	}
	return 0
}

func (m *Order) GetCreateDate() int64 {
	if m != nil {
		return m.CreateDate
	}
	return 0
}

type OrderDto struct {
	Order                *Order   `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
	User                 *User    `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Product              *Product `protobuf:"bytes,3,opt,name=product,proto3" json:"product,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrderDto) Reset()         { *m = OrderDto{} }
func (m *OrderDto) String() string { return proto.CompactTextString(m) }
func (*OrderDto) ProtoMessage()    {}
func (*OrderDto) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e16ccb8c5307b32, []int{5}
}

func (m *OrderDto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderDto.Unmarshal(m, b)
}
func (m *OrderDto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderDto.Marshal(b, m, deterministic)
}
func (m *OrderDto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderDto.Merge(m, src)
}
func (m *OrderDto) XXX_Size() int {
	return xxx_messageInfo_OrderDto.Size(m)
}
func (m *OrderDto) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderDto.DiscardUnknown(m)
}

var xxx_messageInfo_OrderDto proto.InternalMessageInfo

func (m *OrderDto) GetOrder() *Order {
	if m != nil {
		return m.Order
	}
	return nil
}

func (m *OrderDto) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *OrderDto) GetProduct() *Product {
	if m != nil {
		return m.Product
	}
	return nil
}

func init() {
	proto.RegisterType((*Id)(nil), "pb.Id")
	proto.RegisterType((*Result)(nil), "pb.Result")
	proto.RegisterType((*User)(nil), "pb.User")
	proto.RegisterType((*Product)(nil), "pb.Product")
	proto.RegisterType((*Order)(nil), "pb.Order")
	proto.RegisterType((*OrderDto)(nil), "pb.OrderDto")
}

func init() { proto.RegisterFile("services.proto", fileDescriptor_8e16ccb8c5307b32) }

var fileDescriptor_8e16ccb8c5307b32 = []byte{
	// 692 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x95, 0x5d, 0x6e, 0xd3, 0x4e,
	0x14, 0xc5, 0x6b, 0xe7, 0xcb, 0x39, 0x6e, 0x92, 0x76, 0xf4, 0xd7, 0x5f, 0x51, 0x54, 0x95, 0xc8,
	0x34, 0x21, 0xb4, 0x52, 0xa8, 0xcc, 0x12, 0x88, 0x54, 0xf5, 0x05, 0x90, 0xab, 0x2e, 0xc0, 0x8d,
	0x87, 0x62, 0xa9, 0x8d, 0x8d, 0x3d, 0x41, 0xea, 0x22, 0x58, 0x00, 0x0f, 0x6c, 0x80, 0x3d, 0xb1,
	0x04, 0x1e, 0xd8, 0x01, 0x9a, 0x19, 0x8f, 0xc7, 0x1f, 0xc1, 0xe9, 0xdb, 0x9d, 0x7b, 0xcf, 0xdc,
	0xf9, 0x9d, 0x3b, 0x19, 0x07, 0xc3, 0x94, 0x26, 0x5f, 0xc3, 0x35, 0x4d, 0x97, 0x71, 0x12, 0xb1,
	0x88, 0x98, 0xf1, 0x9d, 0xf3, 0x1f, 0xcc, 0xeb, 0x80, 0x0c, 0x61, 0x86, 0xc1, 0xd8, 0x98, 0x1a,
	0x8b, 0x96, 0x67, 0x86, 0x81, 0xb3, 0x44, 0xd7, 0xa3, 0xe9, 0xf6, 0x81, 0x11, 0x82, 0xf6, 0x3a,
	0x0a, 0xa8, 0xa8, 0x75, 0x3c, 0x11, 0x93, 0x23, 0xb4, 0x1e, 0xd3, 0xfb, 0xb1, 0x39, 0x35, 0x16,
	0x7d, 0x8f, 0x87, 0xce, 0x4f, 0x03, 0xed, 0xdb, 0x94, 0x26, 0xe4, 0x7f, 0x74, 0xb7, 0x29, 0x4d,
	0xae, 0x55, 0xb3, 0x6c, 0x45, 0x4e, 0xd0, 0xff, 0x14, 0x26, 0x29, 0x7b, 0xef, 0x3f, 0xd2, 0x6c,
	0xa3, 0x4e, 0x90, 0x09, 0xac, 0x07, 0x3f, 0x2b, 0xb6, 0x44, 0x31, 0x5f, 0xf3, 0xc3, 0xfc, 0x7b,
	0x3a, 0x6e, 0x8b, 0xf3, 0x79, 0x48, 0x4e, 0x81, 0x6d, 0x1c, 0xf8, 0x8c, 0xae, 0x7c, 0x46, 0xc7,
	0x1d, 0x71, 0x4e, 0x21, 0xc3, 0xeb, 0xeb, 0x84, 0xaa, 0x7a, 0x57, 0xd6, 0x75, 0xc6, 0xf9, 0x61,
	0xa0, 0xf7, 0x31, 0x89, 0x82, 0xed, 0x9a, 0x71, 0xae, 0x58, 0x86, 0x39, 0xb2, 0x4e, 0x70, 0xf3,
	0x1b, 0x0d, 0x2c, 0x62, 0x32, 0x85, 0x1d, 0xd0, 0x74, 0x9d, 0x84, 0x31, 0x0b, 0xa3, 0x4d, 0x86,
	0x5b, 0x4c, 0x55, 0xf8, 0xda, 0x7b, 0xf8, 0x3a, 0x35, 0xbe, 0xdf, 0x06, 0x3a, 0x1f, 0x92, 0x80,
	0x26, 0x64, 0x8c, 0x5e, 0xc4, 0x83, 0x9c, 0x4d, 0x2d, 0x0b, 0x73, 0x36, 0xab, 0x73, 0xd6, 0x7e,
	0x5a, 0x55, 0x3f, 0x13, 0x58, 0x5f, 0xb6, 0xfe, 0x86, 0x85, 0xec, 0x29, 0x1b, 0x68, 0xbe, 0xe6,
	0x3b, 0x45, 0xf3, 0x02, 0x94, 0x4e, 0xf0, 0x9d, 0xe9, 0xe7, 0x30, 0x2e, 0x4c, 0x34, 0x5f, 0x57,
	0xfc, 0xf6, 0xf6, 0xf8, 0xb5, 0x6a, 0x7e, 0x63, 0x58, 0xc2, 0xee, 0x8a, 0x45, 0xe4, 0x05, 0x3a,
	0xe2, 0x50, 0xe1, 0xd7, 0x76, 0xfb, 0xcb, 0xf8, 0x6e, 0x29, 0x8a, 0x9e, 0xcc, 0x93, 0x13, 0xb4,
	0xb9, 0x55, 0x61, 0xdb, 0x76, 0x2d, 0x5e, 0xe7, 0x3f, 0x3c, 0x4f, 0x64, 0xc9, 0x0c, 0xbd, 0xcc,
	0xad, 0x30, 0x6f, 0xbb, 0x36, 0x17, 0x64, 0x97, 0xed, 0xa9, 0x9a, 0xfb, 0xcb, 0x84, 0xcd, 0x77,
	0xdd, 0xc8, 0xf7, 0x40, 0x1c, 0xe0, 0x9d, 0xe0, 0x11, 0xbf, 0xe1, 0xbc, 0xe9, 0x24, 0x8f, 0x9c,
	0x03, 0x72, 0x0a, 0xcb, 0xa3, 0x7e, 0x20, 0x14, 0x5d, 0x9e, 0xbf, 0x0e, 0x4a, 0xf5, 0x33, 0xe0,
	0x56, 0x78, 0xae, 0xf4, 0x00, 0x8f, 0xe4, 0x63, 0x72, 0x0e, 0xf8, 0x49, 0x2b, 0xfa, 0x40, 0x33,
	0x95, 0xea, 0x53, 0xd6, 0xcc, 0x31, 0x94, 0x34, 0x37, 0x4f, 0x9b, 0x75, 0x03, 0x91, 0x83, 0x43,
	0x4e, 0x94, 0xab, 0x76, 0x51, 0x2d, 0x30, 0x94, 0x54, 0x3b, 0x7a, 0xd5, 0x4e, 0x95, 0x64, 0xb5,
	0x7e, 0x55, 0x07, 0xd6, 0x15, 0x65, 0x5c, 0x90, 0xee, 0xe6, 0xba, 0x34, 0xdc, 0xef, 0x2d, 0x0c,
	0xb3, 0xa1, 0xab, 0x11, 0x5f, 0x60, 0x20, 0x4d, 0xa9, 0x97, 0x57, 0xbc, 0x99, 0x49, 0x71, 0x21,
	0x66, 0x69, 0x73, 0x67, 0x4a, 0xaa, 0x40, 0x2a, 0xaa, 0x73, 0x0c, 0xa4, 0xb7, 0x9d, 0x2d, 0xcb,
	0xd4, 0x33, 0x0c, 0xa4, 0xbb, 0x6a, 0xcf, 0xb2, 0xec, 0x0d, 0x8e, 0xf5, 0xe8, 0x9f, 0x43, 0xba,
	0xc0, 0x48, 0xdd, 0xc1, 0x1e, 0xda, 0x25, 0x8e, 0xf5, 0x4d, 0x3c, 0x83, 0xf8, 0x35, 0x8e, 0xf5,
	0x7d, 0x34, 0x53, 0x5f, 0xc0, 0xbe, 0xa2, 0x2c, 0xd3, 0xa4, 0x4d, 0xbc, 0x97, 0x86, 0xfb, 0xc7,
	0xc4, 0xa1, 0x78, 0x51, 0xea, 0x66, 0x66, 0xb0, 0xa5, 0x67, 0xf9, 0xcd, 0xd1, 0x4f, 0x6e, 0xa2,
	0x43, 0xe7, 0x80, 0x4c, 0xd1, 0xe7, 0x4e, 0xa5, 0x48, 0x71, 0x94, 0x14, 0x73, 0xd8, 0xd2, 0x61,
	0xad, 0x51, 0x19, 0xf7, 0x25, 0x6c, 0xe9, 0xac, 0xdc, 0xab, 0x6a, 0x7f, 0xa4, 0x6f, 0xa2, 0x99,
	0xec, 0x0c, 0x03, 0x75, 0x07, 0x0d, 0x74, 0xe7, 0x18, 0xe9, 0xf9, 0xef, 0x21, 0x7c, 0x85, 0x91,
	0x9e, 0x7d, 0x13, 0xe5, 0x0c, 0xfd, 0x2b, 0xca, 0x84, 0x22, 0xfd, 0x17, 0xdf, 0xa5, 0xe1, 0x7e,
	0x33, 0x30, 0x52, 0x9f, 0x38, 0x35, 0xf6, 0xb9, 0x7c, 0xbd, 0xf9, 0x97, 0x4f, 0x1d, 0x70, 0x98,
	0x6f, 0x5d, 0xb1, 0x48, 0x70, 0x1f, 0x95, 0xdc, 0x35, 0x69, 0xe7, 0xea, 0xb5, 0xd7, 0x94, 0x25,
	0xec, 0xbb, 0xae, 0xf8, 0xff, 0x7f, 0xfb, 0x37, 0x00, 0x00, 0xff, 0xff, 0x24, 0xc8, 0xd5, 0xce,
	0x11, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserServiceClient interface {
	CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	ReadUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*User, error)
	UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Result, error)
	DeleteUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Result, error)
	CreateSyncUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	ReadSyncUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*User, error)
	UpdateSyncUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Result, error)
	DeleteSyncUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Result, error)
	GetUsers(ctx context.Context, in *User, opts ...grpc.CallOption) (UserService_GetUsersClient, error)
}

type userServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserServiceClient(cc *grpc.ClientConn) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/pb.UserService/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ReadUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/pb.UserService/ReadUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/pb.UserService/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/pb.UserService/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateSyncUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/pb.UserService/CreateSyncUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ReadSyncUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/pb.UserService/ReadSyncUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateSyncUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/pb.UserService/UpdateSyncUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteSyncUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/pb.UserService/DeleteSyncUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUsers(ctx context.Context, in *User, opts ...grpc.CallOption) (UserService_GetUsersClient, error) {
	stream, err := c.cc.NewStream(ctx, &_UserService_serviceDesc.Streams[0], "/pb.UserService/GetUsers", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceGetUsersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserService_GetUsersClient interface {
	Recv() (*User, error)
	grpc.ClientStream
}

type userServiceGetUsersClient struct {
	grpc.ClientStream
}

func (x *userServiceGetUsersClient) Recv() (*User, error) {
	m := new(User)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserServiceServer is the server API for UserService service.
type UserServiceServer interface {
	CreateUser(context.Context, *User) (*User, error)
	ReadUser(context.Context, *Id) (*User, error)
	UpdateUser(context.Context, *User) (*Result, error)
	DeleteUser(context.Context, *Id) (*Result, error)
	CreateSyncUser(context.Context, *User) (*User, error)
	ReadSyncUser(context.Context, *Id) (*User, error)
	UpdateSyncUser(context.Context, *User) (*Result, error)
	DeleteSyncUser(context.Context, *Id) (*Result, error)
	GetUsers(*User, UserService_GetUsersServer) error
}

// UnimplementedUserServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (*UnimplementedUserServiceServer) CreateUser(ctx context.Context, req *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (*UnimplementedUserServiceServer) ReadUser(ctx context.Context, req *Id) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadUser not implemented")
}
func (*UnimplementedUserServiceServer) UpdateUser(ctx context.Context, req *User) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (*UnimplementedUserServiceServer) DeleteUser(ctx context.Context, req *Id) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (*UnimplementedUserServiceServer) CreateSyncUser(ctx context.Context, req *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSyncUser not implemented")
}
func (*UnimplementedUserServiceServer) ReadSyncUser(ctx context.Context, req *Id) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadSyncUser not implemented")
}
func (*UnimplementedUserServiceServer) UpdateSyncUser(ctx context.Context, req *User) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSyncUser not implemented")
}
func (*UnimplementedUserServiceServer) DeleteSyncUser(ctx context.Context, req *Id) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSyncUser not implemented")
}
func (*UnimplementedUserServiceServer) GetUsers(req *User, srv UserService_GetUsersServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ReadUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ReadUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserService/ReadUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ReadUser(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserService/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserService/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteUser(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateSyncUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateSyncUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserService/CreateSyncUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateSyncUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ReadSyncUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ReadSyncUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserService/ReadSyncUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ReadSyncUser(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateSyncUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateSyncUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserService/UpdateSyncUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateSyncUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteSyncUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteSyncUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserService/DeleteSyncUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteSyncUser(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(User)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserServiceServer).GetUsers(m, &userServiceGetUsersServer{stream})
}

type UserService_GetUsersServer interface {
	Send(*User) error
	grpc.ServerStream
}

type userServiceGetUsersServer struct {
	grpc.ServerStream
}

func (x *userServiceGetUsersServer) Send(m *User) error {
	return x.ServerStream.SendMsg(m)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _UserService_CreateUser_Handler,
		},
		{
			MethodName: "ReadUser",
			Handler:    _UserService_ReadUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserService_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UserService_DeleteUser_Handler,
		},
		{
			MethodName: "CreateSyncUser",
			Handler:    _UserService_CreateSyncUser_Handler,
		},
		{
			MethodName: "ReadSyncUser",
			Handler:    _UserService_ReadSyncUser_Handler,
		},
		{
			MethodName: "UpdateSyncUser",
			Handler:    _UserService_UpdateSyncUser_Handler,
		},
		{
			MethodName: "DeleteSyncUser",
			Handler:    _UserService_DeleteSyncUser_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetUsers",
			Handler:       _UserService_GetUsers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "services.proto",
}

// ProductServiceClient is the client API for ProductService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProductServiceClient interface {
	CreateProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Product, error)
	ReadProduct(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Product, error)
	UpdateProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Result, error)
	DeleteProduct(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Result, error)
	CreateSyncProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Product, error)
	ReadSyncProduct(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Product, error)
	UpdateSyncProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Result, error)
	DeleteSyncProduct(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Result, error)
	GetProducts(ctx context.Context, in *Product, opts ...grpc.CallOption) (ProductService_GetProductsClient, error)
}

type productServiceClient struct {
	cc *grpc.ClientConn
}

func NewProductServiceClient(cc *grpc.ClientConn) ProductServiceClient {
	return &productServiceClient{cc}
}

func (c *productServiceClient) CreateProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Product, error) {
	out := new(Product)
	err := c.cc.Invoke(ctx, "/pb.ProductService/CreateProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) ReadProduct(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Product, error) {
	out := new(Product)
	err := c.cc.Invoke(ctx, "/pb.ProductService/ReadProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UpdateProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/pb.ProductService/UpdateProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteProduct(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/pb.ProductService/DeleteProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) CreateSyncProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Product, error) {
	out := new(Product)
	err := c.cc.Invoke(ctx, "/pb.ProductService/CreateSyncProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) ReadSyncProduct(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Product, error) {
	out := new(Product)
	err := c.cc.Invoke(ctx, "/pb.ProductService/ReadSyncProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UpdateSyncProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/pb.ProductService/UpdateSyncProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteSyncProduct(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/pb.ProductService/DeleteSyncProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetProducts(ctx context.Context, in *Product, opts ...grpc.CallOption) (ProductService_GetProductsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ProductService_serviceDesc.Streams[0], "/pb.ProductService/GetProducts", opts...)
	if err != nil {
		return nil, err
	}
	x := &productServiceGetProductsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProductService_GetProductsClient interface {
	Recv() (*Product, error)
	grpc.ClientStream
}

type productServiceGetProductsClient struct {
	grpc.ClientStream
}

func (x *productServiceGetProductsClient) Recv() (*Product, error) {
	m := new(Product)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProductServiceServer is the server API for ProductService service.
type ProductServiceServer interface {
	CreateProduct(context.Context, *Product) (*Product, error)
	ReadProduct(context.Context, *Id) (*Product, error)
	UpdateProduct(context.Context, *Product) (*Result, error)
	DeleteProduct(context.Context, *Id) (*Result, error)
	CreateSyncProduct(context.Context, *Product) (*Product, error)
	ReadSyncProduct(context.Context, *Id) (*Product, error)
	UpdateSyncProduct(context.Context, *Product) (*Result, error)
	DeleteSyncProduct(context.Context, *Id) (*Result, error)
	GetProducts(*Product, ProductService_GetProductsServer) error
}

// UnimplementedProductServiceServer can be embedded to have forward compatible implementations.
type UnimplementedProductServiceServer struct {
}

func (*UnimplementedProductServiceServer) CreateProduct(ctx context.Context, req *Product) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProduct not implemented")
}
func (*UnimplementedProductServiceServer) ReadProduct(ctx context.Context, req *Id) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadProduct not implemented")
}
func (*UnimplementedProductServiceServer) UpdateProduct(ctx context.Context, req *Product) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProduct not implemented")
}
func (*UnimplementedProductServiceServer) DeleteProduct(ctx context.Context, req *Id) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProduct not implemented")
}
func (*UnimplementedProductServiceServer) CreateSyncProduct(ctx context.Context, req *Product) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSyncProduct not implemented")
}
func (*UnimplementedProductServiceServer) ReadSyncProduct(ctx context.Context, req *Id) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadSyncProduct not implemented")
}
func (*UnimplementedProductServiceServer) UpdateSyncProduct(ctx context.Context, req *Product) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSyncProduct not implemented")
}
func (*UnimplementedProductServiceServer) DeleteSyncProduct(ctx context.Context, req *Id) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSyncProduct not implemented")
}
func (*UnimplementedProductServiceServer) GetProducts(req *Product, srv ProductService_GetProductsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetProducts not implemented")
}

func RegisterProductServiceServer(s *grpc.Server, srv ProductServiceServer) {
	s.RegisterService(&_ProductService_serviceDesc, srv)
}

func _ProductService_CreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).CreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProductService/CreateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).CreateProduct(ctx, req.(*Product))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_ReadProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ReadProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProductService/ReadProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ReadProduct(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UpdateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UpdateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProductService/UpdateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UpdateProduct(ctx, req.(*Product))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DeleteProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DeleteProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProductService/DeleteProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DeleteProduct(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_CreateSyncProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).CreateSyncProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProductService/CreateSyncProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).CreateSyncProduct(ctx, req.(*Product))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_ReadSyncProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ReadSyncProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProductService/ReadSyncProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ReadSyncProduct(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UpdateSyncProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UpdateSyncProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProductService/UpdateSyncProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UpdateSyncProduct(ctx, req.(*Product))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DeleteSyncProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DeleteSyncProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProductService/DeleteSyncProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DeleteSyncProduct(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetProducts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Product)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProductServiceServer).GetProducts(m, &productServiceGetProductsServer{stream})
}

type ProductService_GetProductsServer interface {
	Send(*Product) error
	grpc.ServerStream
}

type productServiceGetProductsServer struct {
	grpc.ServerStream
}

func (x *productServiceGetProductsServer) Send(m *Product) error {
	return x.ServerStream.SendMsg(m)
}

var _ProductService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ProductService",
	HandlerType: (*ProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProduct",
			Handler:    _ProductService_CreateProduct_Handler,
		},
		{
			MethodName: "ReadProduct",
			Handler:    _ProductService_ReadProduct_Handler,
		},
		{
			MethodName: "UpdateProduct",
			Handler:    _ProductService_UpdateProduct_Handler,
		},
		{
			MethodName: "DeleteProduct",
			Handler:    _ProductService_DeleteProduct_Handler,
		},
		{
			MethodName: "CreateSyncProduct",
			Handler:    _ProductService_CreateSyncProduct_Handler,
		},
		{
			MethodName: "ReadSyncProduct",
			Handler:    _ProductService_ReadSyncProduct_Handler,
		},
		{
			MethodName: "UpdateSyncProduct",
			Handler:    _ProductService_UpdateSyncProduct_Handler,
		},
		{
			MethodName: "DeleteSyncProduct",
			Handler:    _ProductService_DeleteSyncProduct_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetProducts",
			Handler:       _ProductService_GetProducts_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "services.proto",
}

// OrderServiceClient is the client API for OrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OrderServiceClient interface {
	CreateOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Order, error)
	ReadOrder(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Order, error)
	UpdateOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Result, error)
	DeleteOrder(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Result, error)
	CreateSyncOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Order, error)
	ReadSyncOrder(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Order, error)
	UpdateSyncOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Result, error)
	DeleteSyncOrder(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Result, error)
	GetOrders(ctx context.Context, in *Order, opts ...grpc.CallOption) (OrderService_GetOrdersClient, error)
}

type orderServiceClient struct {
	cc *grpc.ClientConn
}

func NewOrderServiceClient(cc *grpc.ClientConn) OrderServiceClient {
	return &orderServiceClient{cc}
}

func (c *orderServiceClient) CreateOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, "/pb.OrderService/CreateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) ReadOrder(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, "/pb.OrderService/ReadOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) UpdateOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/pb.OrderService/UpdateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) DeleteOrder(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/pb.OrderService/DeleteOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) CreateSyncOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, "/pb.OrderService/CreateSyncOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) ReadSyncOrder(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, "/pb.OrderService/ReadSyncOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) UpdateSyncOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/pb.OrderService/UpdateSyncOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) DeleteSyncOrder(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/pb.OrderService/DeleteSyncOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetOrders(ctx context.Context, in *Order, opts ...grpc.CallOption) (OrderService_GetOrdersClient, error) {
	stream, err := c.cc.NewStream(ctx, &_OrderService_serviceDesc.Streams[0], "/pb.OrderService/GetOrders", opts...)
	if err != nil {
		return nil, err
	}
	x := &orderServiceGetOrdersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OrderService_GetOrdersClient interface {
	Recv() (*Order, error)
	grpc.ClientStream
}

type orderServiceGetOrdersClient struct {
	grpc.ClientStream
}

func (x *orderServiceGetOrdersClient) Recv() (*Order, error) {
	m := new(Order)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OrderServiceServer is the server API for OrderService service.
type OrderServiceServer interface {
	CreateOrder(context.Context, *Order) (*Order, error)
	ReadOrder(context.Context, *Id) (*Order, error)
	UpdateOrder(context.Context, *Order) (*Result, error)
	DeleteOrder(context.Context, *Id) (*Result, error)
	CreateSyncOrder(context.Context, *Order) (*Order, error)
	ReadSyncOrder(context.Context, *Id) (*Order, error)
	UpdateSyncOrder(context.Context, *Order) (*Result, error)
	DeleteSyncOrder(context.Context, *Id) (*Result, error)
	GetOrders(*Order, OrderService_GetOrdersServer) error
}

// UnimplementedOrderServiceServer can be embedded to have forward compatible implementations.
type UnimplementedOrderServiceServer struct {
}

func (*UnimplementedOrderServiceServer) CreateOrder(ctx context.Context, req *Order) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (*UnimplementedOrderServiceServer) ReadOrder(ctx context.Context, req *Id) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadOrder not implemented")
}
func (*UnimplementedOrderServiceServer) UpdateOrder(ctx context.Context, req *Order) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrder not implemented")
}
func (*UnimplementedOrderServiceServer) DeleteOrder(ctx context.Context, req *Id) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrder not implemented")
}
func (*UnimplementedOrderServiceServer) CreateSyncOrder(ctx context.Context, req *Order) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSyncOrder not implemented")
}
func (*UnimplementedOrderServiceServer) ReadSyncOrder(ctx context.Context, req *Id) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadSyncOrder not implemented")
}
func (*UnimplementedOrderServiceServer) UpdateSyncOrder(ctx context.Context, req *Order) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSyncOrder not implemented")
}
func (*UnimplementedOrderServiceServer) DeleteSyncOrder(ctx context.Context, req *Id) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSyncOrder not implemented")
}
func (*UnimplementedOrderServiceServer) GetOrders(req *Order, srv OrderService_GetOrdersServer) error {
	return status.Errorf(codes.Unimplemented, "method GetOrders not implemented")
}

func RegisterOrderServiceServer(s *grpc.Server, srv OrderServiceServer) {
	s.RegisterService(&_OrderService_serviceDesc, srv)
}

func _OrderService_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.OrderService/CreateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).CreateOrder(ctx, req.(*Order))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_ReadOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).ReadOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.OrderService/ReadOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).ReadOrder(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_UpdateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).UpdateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.OrderService/UpdateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).UpdateOrder(ctx, req.(*Order))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_DeleteOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).DeleteOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.OrderService/DeleteOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).DeleteOrder(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_CreateSyncOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).CreateSyncOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.OrderService/CreateSyncOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).CreateSyncOrder(ctx, req.(*Order))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_ReadSyncOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).ReadSyncOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.OrderService/ReadSyncOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).ReadSyncOrder(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_UpdateSyncOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).UpdateSyncOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.OrderService/UpdateSyncOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).UpdateSyncOrder(ctx, req.(*Order))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_DeleteSyncOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).DeleteSyncOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.OrderService/DeleteSyncOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).DeleteSyncOrder(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetOrders_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Order)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrderServiceServer).GetOrders(m, &orderServiceGetOrdersServer{stream})
}

type OrderService_GetOrdersServer interface {
	Send(*Order) error
	grpc.ServerStream
}

type orderServiceGetOrdersServer struct {
	grpc.ServerStream
}

func (x *orderServiceGetOrdersServer) Send(m *Order) error {
	return x.ServerStream.SendMsg(m)
}

var _OrderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.OrderService",
	HandlerType: (*OrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrder",
			Handler:    _OrderService_CreateOrder_Handler,
		},
		{
			MethodName: "ReadOrder",
			Handler:    _OrderService_ReadOrder_Handler,
		},
		{
			MethodName: "UpdateOrder",
			Handler:    _OrderService_UpdateOrder_Handler,
		},
		{
			MethodName: "DeleteOrder",
			Handler:    _OrderService_DeleteOrder_Handler,
		},
		{
			MethodName: "CreateSyncOrder",
			Handler:    _OrderService_CreateSyncOrder_Handler,
		},
		{
			MethodName: "ReadSyncOrder",
			Handler:    _OrderService_ReadSyncOrder_Handler,
		},
		{
			MethodName: "UpdateSyncOrder",
			Handler:    _OrderService_UpdateSyncOrder_Handler,
		},
		{
			MethodName: "DeleteSyncOrder",
			Handler:    _OrderService_DeleteSyncOrder_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetOrders",
			Handler:       _OrderService_GetOrders_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "services.proto",
}

// OrderDtoServiceClient is the client API for OrderDtoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OrderDtoServiceClient interface {
	ReadOrderDto(ctx context.Context, in *Id, opts ...grpc.CallOption) (*OrderDto, error)
	ReadSyncOrderDto(ctx context.Context, in *Id, opts ...grpc.CallOption) (*OrderDto, error)
	UpdateOrderDto(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Result, error)
}

type orderDtoServiceClient struct {
	cc *grpc.ClientConn
}

func NewOrderDtoServiceClient(cc *grpc.ClientConn) OrderDtoServiceClient {
	return &orderDtoServiceClient{cc}
}

func (c *orderDtoServiceClient) ReadOrderDto(ctx context.Context, in *Id, opts ...grpc.CallOption) (*OrderDto, error) {
	out := new(OrderDto)
	err := c.cc.Invoke(ctx, "/pb.OrderDtoService/ReadOrderDto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderDtoServiceClient) ReadSyncOrderDto(ctx context.Context, in *Id, opts ...grpc.CallOption) (*OrderDto, error) {
	out := new(OrderDto)
	err := c.cc.Invoke(ctx, "/pb.OrderDtoService/ReadSyncOrderDto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderDtoServiceClient) UpdateOrderDto(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/pb.OrderDtoService/UpdateOrderDto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderDtoServiceServer is the server API for OrderDtoService service.
type OrderDtoServiceServer interface {
	ReadOrderDto(context.Context, *Id) (*OrderDto, error)
	ReadSyncOrderDto(context.Context, *Id) (*OrderDto, error)
	UpdateOrderDto(context.Context, *Id) (*Result, error)
}

// UnimplementedOrderDtoServiceServer can be embedded to have forward compatible implementations.
type UnimplementedOrderDtoServiceServer struct {
}

func (*UnimplementedOrderDtoServiceServer) ReadOrderDto(ctx context.Context, req *Id) (*OrderDto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadOrderDto not implemented")
}
func (*UnimplementedOrderDtoServiceServer) ReadSyncOrderDto(ctx context.Context, req *Id) (*OrderDto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadSyncOrderDto not implemented")
}
func (*UnimplementedOrderDtoServiceServer) UpdateOrderDto(ctx context.Context, req *Id) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrderDto not implemented")
}

func RegisterOrderDtoServiceServer(s *grpc.Server, srv OrderDtoServiceServer) {
	s.RegisterService(&_OrderDtoService_serviceDesc, srv)
}

func _OrderDtoService_ReadOrderDto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderDtoServiceServer).ReadOrderDto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.OrderDtoService/ReadOrderDto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderDtoServiceServer).ReadOrderDto(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderDtoService_ReadSyncOrderDto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderDtoServiceServer).ReadSyncOrderDto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.OrderDtoService/ReadSyncOrderDto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderDtoServiceServer).ReadSyncOrderDto(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderDtoService_UpdateOrderDto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderDtoServiceServer).UpdateOrderDto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.OrderDtoService/UpdateOrderDto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderDtoServiceServer).UpdateOrderDto(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _OrderDtoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.OrderDtoService",
	HandlerType: (*OrderDtoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadOrderDto",
			Handler:    _OrderDtoService_ReadOrderDto_Handler,
		},
		{
			MethodName: "ReadSyncOrderDto",
			Handler:    _OrderDtoService_ReadSyncOrderDto_Handler,
		},
		{
			MethodName: "UpdateOrderDto",
			Handler:    _OrderDtoService_UpdateOrderDto_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services.proto",
}
